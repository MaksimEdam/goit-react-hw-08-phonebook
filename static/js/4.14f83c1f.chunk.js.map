{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/EditorButton/EditorButton.module.css","components/ContactListItem/ContactListItem.module.css","components/ContactList/ContactList.module.css","views/ContactsPage.module.css","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","redux/contacts/contacts-operations.js","components/Filter/Filter.js","components/EditorButton/EditorButton.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","views/ContactsPage.js"],"names":["module","exports","getFilterValue","state","contacts","filter","getAllContacts","items","getFilteredItems","createSelector","name","number","toLowerCase","includes","toLocaleLowerCase","getLoading","loading","ContactForm","useState","newContact","setNewContact","allContacts","useSelector","dispatch","useDispatch","handleInputChange","useCallback","target","value","handleSubmit","event","preventDefault","contact","existingContact","find","alert","a","addContactRequest","axios","post","data","addContactSuccess","addContactError","message","className","s","form","onSubmit","inputWrapper","label","type","onChange","required","formButton","Filter","onUpdateFilter","updateFilter","filterValue","autoComplete","EditorButton","purpose","callback","onClick","defaultProps","ContactListItem","id","editedContact","setEditedContact","onDeleteContact","contactId","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","deleteContact","item","editorInput","btnGroup","ContactList","useEffect","fetchContactsRequest","get","fetchContactsSuccess","fetchContactsError","filtered","isLoading","loaderConfig","color","height","width","loader","_","isEmpty","map","notification","ContactsPage","wrapper"],"mappings":"mIACAA,EAAOC,QAAU,CAAC,KAAO,0BAA0B,aAAe,kCAAkC,MAAQ,2BAA2B,WAAa,kC,oBCApJD,EAAOC,QAAU,CAAC,OAAS,yB,oBCA3BD,EAAOC,QAAU,CAAC,IAAM,0BAA0B,OAAS,+B,oBCA3DD,EAAOC,QAAU,CAAC,KAAO,8BAA8B,KAAO,8BAA8B,YAAc,qCAAqC,SAAW,oC,oBCA1JD,EAAOC,QAAU,CAAC,SAAW,8BAA8B,aAAe,kCAAkC,OAAS,8B,oBCArHD,EAAOC,QAAU,CAAC,QAAU,gC,2ICCtBC,EAAiB,SAACC,GAAD,OAAWA,EAAMC,SAASC,QAC3CC,EAAiB,SAACH,GAAD,OAAWA,EAAMC,SAASG,OAE3CC,EAAmBC,YACvB,CAACH,EAAgBJ,IACjB,SAACK,EAAOF,GAAR,OACEE,EAAMF,QACJ,gBAAGK,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAT,OACED,EAAKE,cAAcC,SAASR,EAAOS,sBACnCH,EAAOE,SAASR,SAIlBU,EAAa,SAACZ,GAAD,OAAWA,EAAMC,SAASY,S,yBCT9B,SAASC,IACtB,MAAoCC,mBAAS,CAAER,KAAM,GAAIC,OAAQ,KAAjE,mBAAOQ,EAAP,KAAmBC,EAAnB,KACMC,EAAcC,YAAYhB,GAC1BiB,EAAWC,cACXC,EAAoBC,uBACxB,YAAkC,IAAD,IAA9BC,OAAUjB,EAAoB,EAApBA,KAAMkB,EAAc,EAAdA,MACjBR,EAAc,2BAAKD,GAAN,kBAAmBT,EAAOkB,OAEzC,CAACT,IAEGU,EAAeH,uBACnB,SAACI,GAGC,GAFAA,EAAMC,iBAEDZ,EAAWT,KAAhB,CAGA,ICEcsB,EDFRC,EAAkBZ,EAAYa,MAClC,SAACF,GAAD,OAAaA,EAAQtB,OAASS,EAAWT,QAE3C,GAAIuB,EACFE,MAAM,GAAD,OAAIF,EAAgBvB,KAApB,kCAGPa,GCLcS,EDKMb,ECLP,uCAAa,WAAOI,GAAP,iBAAAa,EAAA,6DAC9Bb,EAASc,eADqB,kBAGLC,IAAMC,KAAK,YAAaP,GAHnB,gBAGpBQ,EAHoB,EAGpBA,KACRjB,EAASkB,YAAkBD,IAJC,gDAM5BjB,EAASmB,YAAgB,KAAMC,UANH,yDAAb,wDDMbvB,EAAc,CAAEV,KAAM,GAAIC,OAAQ,QAEpC,CAACU,EAAaE,EAAUJ,IAG1B,OACE,uBAAMyB,UAAWC,IAAEC,KAAMC,SAAUlB,EAAnC,UACE,qBAAKe,UAAWC,IAAEG,aAAlB,SACE,wBAAOJ,UAAWC,IAAEI,MAApB,iBAEE,uBACEC,KAAK,OACLxC,KAAK,OACLkB,MAAOT,EAAWT,KAClByC,SAAU1B,EACV2B,UAAQ,SAId,qBAAKR,UAAWC,IAAEG,aAAlB,SACE,wBAAOJ,UAAWC,IAAEI,MAApB,mBAEE,uBACEC,KAAK,MACLxC,KAAK,SACLkB,MAAOT,EAAWR,OAClBwC,SAAU1B,EACV2B,UAAQ,SAKd,wBAAQF,KAAK,SAASN,UAAWC,IAAEQ,WAAnC,4B,sBEzDS,SAASC,IACtB,IAAM/B,EAAWC,cACX+B,EAAiB7B,uBACrB,SAACI,GAAD,OAAWP,EAASiC,YAAa1B,EAAMH,OAAOC,UAC9C,CAACL,IAEGkC,EAAcnC,YAAYpB,GAEhC,OACE,qBAAK0C,UAAWC,IAAExC,OAAlB,SACE,0DAEE,uBACE6C,KAAK,OACLxC,KAAK,SACLkB,MAAO6B,EACPN,SAAUI,EACVG,aAAa,MACbN,UAAQ,S,sBCrBZO,EAAe,SAAC,GAAiC,IAA/BT,EAA8B,EAA9BA,KAAMU,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SACrC,OACE,wBAAQX,KAAMA,EAAMN,UAAWC,IAAEe,GAAUE,QAAS,kBAAMD,KAA1D,SACGD,KAIPD,EAAaI,aAAe,CAC1Bb,KAAM,UASOS,Q,0BCbA,SAASK,EAAT,GAA6D,IAAD,IAAjChC,QAAWiC,EAAsB,EAAtBA,GAAIvD,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,OAC7D,EAA0CO,mBAAS,CACjDR,KAAMA,EACNC,OAAQA,IAFV,mBAAOuD,EAAP,KAAsBC,EAAtB,KAIM5C,EAAWC,cACX4C,EAAkB,SAACC,GAAD,OAAe9C,EHqBnB,SAAC8C,GAAD,8CAAe,WAAO9C,GAAP,SAAAa,EAAA,6DACnCb,EAAS+C,eAD0B,kBAG3BhC,IAAMiC,OAAN,oBAA0BF,IAHC,OAIjC9C,EAASiD,YAAqBH,IAJG,gDAMjC9C,EAASkD,YAAmB,KAAM9B,UAND,yDAAf,sDGrB4B+B,CAAcL,KACxD5C,EAAoBC,uBACxB,YAAkC,IAAD,IAA9BC,OAAUjB,EAAoB,EAApBA,KAAMkB,EAAc,EAAdA,MACjBuC,EAAiB,2BAAKD,GAAN,kBAAsBxD,EAAOkB,OAE/C,CAACsC,IAGH,OACE,qBAAItB,UAAWC,IAAE8B,KAAjB,UACE,mCACE,sBAAK/B,UAAWC,IAAE+B,YAAlB,UACE,uBACE1B,KAAK,OACLxC,KAAK,OACLkB,MAAOsC,EAAcxD,KACrByC,SAAU1B,EACV2B,UAAQ,IAEV,uBACEF,KAAK,MACLxC,KAAK,SACLkB,MAAOsC,EAAcvD,OACrBwC,SAAU1B,EACV2B,UAAQ,SAKd,qBAAKR,UAAWC,IAAEgC,SAAlB,SACE,cAAC,EAAD,CAAcjB,QAAQ,SAASC,SAAU,kBAAMO,EAAgBH,W,yDC9BxD,SAASa,IACtB,IAAMvD,EAAWC,cACjBuD,qBAAU,kBAAMxD,EJCI,uCAAM,WAAOA,GAAP,iBAAAa,EAAA,6DAC1Bb,EAASyD,eADiB,kBAGD1C,IAAM2C,IAAI,aAHT,gBAGhBzC,EAHgB,EAGhBA,KACRjB,EAAS2D,YAAqB1C,IAJN,gDAMxBjB,EAAS4D,YAAmB,KAAMxC,UANV,yDAAN,yDIDuB,CAACpB,IAC5C,IAAM6D,EAAW9D,YAAYd,GACvB6E,EAAY/D,YAAYP,GACxBuE,EAAe,CACnBpC,KAAM,WACNqC,MAAO,UACPC,OAAQ,GACRC,MAAO,GACP7C,UAAWC,IAAE6C,QAGf,OACE,qCACGL,GAAa,cAAC,IAAD,eAAYC,KACxBK,IAAEC,QAAQR,IACV,oBAAIxC,UAAWC,IAAEzC,SAAjB,SACGgF,EAASS,KAAI,SAAC7D,GAAD,OACZ,cAACgC,EAAD,CAAkChC,QAASA,GAArBA,EAAQiC,SAInC0B,IAAEC,QAAQR,KAAcC,GACvB,mBAAGzC,UAAWC,IAAEiD,aAAhB,kC,sBCtBOC,UAVM,WACnB,OACE,sBAAKnD,UAAWC,IAAEmD,QAAlB,UACE,cAAC/E,EAAD,IACA,cAACqC,EAAD,IACA,cAACwB,EAAD","file":"static/js/4.14f83c1f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2aePQ\",\"inputWrapper\":\"ContactForm_inputWrapper__1ZLVn\",\"label\":\"ContactForm_label__2a7yV\",\"formButton\":\"ContactForm_formButton__3OMqZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__1GAqH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"EditorButton_btn__2X8p1\",\"delete\":\"EditorButton_delete__Zh3Dz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"ContactListItem_info__MUeKi\",\"item\":\"ContactListItem_item__1-31H\",\"editorInput\":\"ContactListItem_editorInput__2UlSd\",\"btnGroup\":\"ContactListItem_btnGroup__-RpKN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts\":\"ContactList_contacts__2xU1M\",\"notification\":\"ContactList_notification__1gHaa\",\"loader\":\"ContactList_loader__2HHno\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"ContactsPage_wrapper__60PRS\"};","import { createSelector } from \"@reduxjs/toolkit\";\n\nconst getFilterValue = (state) => state.contacts.filter;\nconst getAllContacts = (state) => state.contacts.items;\n\nconst getFilteredItems = createSelector(\n  [getAllContacts, getFilterValue],\n  (items, filter) =>\n    items.filter(\n      ({ name, number }) =>\n        name.toLowerCase().includes(filter.toLocaleLowerCase()) ||\n        number.includes(filter)\n    )\n);\n\nconst getLoading = (state) => state.contacts.loading;\nconst getUpdateLoading = (state) => state.contacts.updateLoading;\n\nexport {\n  getFilterValue,\n  getAllContacts,\n  getFilteredItems,\n  getLoading,\n  getUpdateLoading,\n};\n","import React, { useCallback, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addContact } from \"../../redux/contacts/contacts-operations\";\nimport { getAllContacts } from \"../../redux/contacts/contacts-selectors\";\nimport s from \"./ContactForm.module.css\";\n\nexport default function ContactForm() {\n  const [newContact, setNewContact] = useState({ name: \"\", number: \"\" });\n  const allContacts = useSelector(getAllContacts);\n  const dispatch = useDispatch();\n  const handleInputChange = useCallback(\n    ({ target: { name, value } }) => {\n      setNewContact({ ...newContact, [name]: value });\n    },\n    [newContact]\n  );\n  const handleSubmit = useCallback(\n    (event) => {\n      event.preventDefault();\n\n      if (!newContact.name) {\n        return;\n      }\n      const existingContact = allContacts.find(\n        (contact) => contact.name === newContact.name\n      );\n      if (existingContact) {\n        alert(`${existingContact.name} is already in contacts.`);\n        return;\n      }\n      dispatch(addContact(newContact));\n      setNewContact({ name: \"\", number: \"\" });\n    },\n    [allContacts, dispatch, newContact]\n  );\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <div className={s.inputWrapper}>\n        <label className={s.label}>\n          Name\n          <input\n            type=\"name\"\n            name=\"name\"\n            value={newContact.name}\n            onChange={handleInputChange}\n            required\n          />\n        </label>\n      </div>\n      <div className={s.inputWrapper}>\n        <label className={s.label}>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={newContact.number}\n            onChange={handleInputChange}\n            required\n          />\n        </label>\n      </div>\n\n      <button type=\"submit\" className={s.formButton}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n","import {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  updateContactRequest,\n  updateContactSuccess,\n  updateContactError,\n} from \"./contacts-actions\";\nimport axios from \"axios\";\n\nconst fetchContacts = () => async (dispatch) => {\n  dispatch(fetchContactsRequest());\n  try {\n    const { data } = await axios.get(\"/contacts\");\n    dispatch(fetchContactsSuccess(data));\n  } catch (error) {\n    dispatch(fetchContactsError(error.message));\n  }\n};\nconst addContact = (contact) => async (dispatch) => {\n  dispatch(addContactRequest());\n  try {\n    const { data } = await axios.post(\"/contacts\", contact);\n    dispatch(addContactSuccess(data));\n  } catch (error) {\n    dispatch(addContactError(error.message));\n  }\n};\nconst deleteContact = (contactId) => async (dispatch) => {\n  dispatch(deleteContactRequest());\n  try {\n    await axios.delete(`/contacts/${contactId}`);\n    dispatch(deleteContactSuccess(contactId));\n  } catch (error) {\n    dispatch(deleteContactError(error.message));\n  }\n};\nconst updateContact =\n  (contactId, updatedUser, setSaving) => async (dispatch) => {\n    dispatch(updateContactRequest());\n    try {\n      const { data } = await axios.patch(`/contacts/${contactId}`, updatedUser);\n      dispatch(updateContactSuccess(data));\n      setSaving(false);\n    } catch (error) {\n      dispatch(updateContactError(error.message));\n    }\n  };\n\nexport { fetchContacts, addContact, deleteContact, updateContact };\n","import React, { useCallback } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateFilter } from \"../../redux/contacts/contacts-actions\";\nimport { getFilterValue } from \"../../redux/contacts/contacts-selectors\";\nimport s from \"./Filter.module.css\";\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n  const onUpdateFilter = useCallback(\n    (event) => dispatch(updateFilter(event.target.value)),\n    [dispatch]\n  );\n  const filterValue = useSelector(getFilterValue);\n\n  return (\n    <div className={s.filter}>\n      <label>\n        Find contacts by name\n        <input\n          type=\"text\"\n          name=\"filter\"\n          value={filterValue}\n          onChange={onUpdateFilter}\n          autoComplete=\"off\"\n          required\n        />\n      </label>\n    </div>\n  );\n}\n","import PropTypes from \"prop-types\";\nimport s from \"./EditorButton.module.css\";\n\nconst EditorButton = ({ type, purpose, callback }) => {\n  return (\n    <button type={type} className={s[purpose]} onClick={() => callback()}>\n      {purpose}\n    </button>\n  );\n};\nEditorButton.defaultProps = {\n  type: \"button\",\n};\nEditorButton.propTypes = {\n  type: PropTypes.string,\n  purpose: PropTypes.string.isRequired,\n  callback: PropTypes.func.isRequired,\n  args: PropTypes.array,\n};\n\nexport default EditorButton;\n","import React, { useCallback, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { deleteContact } from \"../../redux/contacts/contacts-operations\";\nimport EditorButton from \"../EditorButton\";\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport s from \"./ContactListItem.module.css\";\n\nexport default function ContactListItem({ contact: { id, name, number } }) {\n  const [editedContact, setEditedContact] = useState({\n    name: name,\n    number: number,\n  });\n  const dispatch = useDispatch();\n  const onDeleteContact = (contactId) => dispatch(deleteContact(contactId));\n  const handleInputChange = useCallback(\n    ({ target: { name, value } }) => {\n      setEditedContact({ ...editedContact, [name]: value });\n    },\n    [editedContact]\n  );\n\n  return (\n    <li className={s.item}>\n      <>\n        <div className={s.editorInput}>\n          <input\n            type=\"name\"\n            name=\"name\"\n            value={editedContact.name}\n            onChange={handleInputChange}\n            required\n          />\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={editedContact.number}\n            onChange={handleInputChange}\n            required\n          />\n        </div>\n      </>\n\n      <div className={s.btnGroup}>\n        <EditorButton purpose=\"delete\" callback={() => onDeleteContact(id)} />\n      </div>\n    </li>\n  );\n}\n","import React, { useEffect } from \"react\";\r\nimport ContactListItem from \"../ContactListItem\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { fetchContacts } from \"../../redux/contacts/contacts-operations\";\r\nimport {\r\n  getFilteredItems,\r\n  getLoading,\r\n} from \"../../redux/contacts/contacts-selectors\";\r\nimport _ from \"lodash\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nimport s from \"./ContactList.module.css\";\r\n\r\nexport default function ContactList() {\r\n  const dispatch = useDispatch();\r\n  useEffect(() => dispatch(fetchContacts()), [dispatch]);\r\n  const filtered = useSelector(getFilteredItems);\r\n  const isLoading = useSelector(getLoading);\r\n  const loaderConfig = {\r\n    type: \"TailSpin\",\r\n    color: \"#80cbc4\",\r\n    height: 50,\r\n    width: 50,\r\n    className: s.loader,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isLoading && <Loader {...loaderConfig} />}\r\n      {!_.isEmpty(filtered) && (\r\n        <ul className={s.contacts}>\r\n          {filtered.map((contact) => (\r\n            <ContactListItem key={contact.id} contact={contact} />\r\n          ))}\r\n        </ul>\r\n      )}\r\n      {_.isEmpty(filtered) && !isLoading && (\r\n        <p className={s.notification}>No contact found.</p>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import ContactForm from \"../components/ContactForm\";\nimport Filter from \"../components/Filter\";\nimport ContactList from \"../components/ContactList\";\nimport s from \"./ContactsPage.module.css\";\n\nconst ContactsPage = () => {\n  return (\n    <div className={s.wrapper}>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"sourceRoot":""}